root = statement* ;

statement = lrBlock
          | declaration
          | assignment
          | expressionStatement
          | ifStatement
          | forStatement
          | whileStatement
          | forInStatement
          | switchStatement
          | funcDeclaration
          | classDeclaration
          | funcRunStatement
          | classFuncRunStatement
          | importStatement
          | nativeStatement
          | nativeStatic
          | nativeClass
          | plusPlus
          | minusMinus ;

lrBlock = "(" statement ")" ;

declaration = identifier "<-" expression ;

assignment = identifier "=" expression ;

expressionStatement = expression ;

ifStatement = "if" expression block ( "elif" expression block )* ( "else" block )? ;

forStatement = "for" set "," expression "," statement block ;

whileStatement = "while" expression block ;

forInStatement = "for" identifier "in" expression block ;

switchStatement = "switch" expression "{" caseBlock* ( "default" block )? "}" ;

caseBlock = "case" expression block ;

funcDeclaration = ( identifier | "func" identifier ) "(" idList? ")" ( "->" block | block ) ;

classDeclaration = "class" identifier classBlock ;

funcRunStatement = identifier "(" argList? ")" ;

classFuncRunStatement = identifier "." identifier "(" argList? ")" ;

importStatement = "import" identifier ;

nativeStatement = "[" "import" STRING identifier identifier identifier? "]" ;

nativeStatic = "[" "import" STRING identifier "]" "->" STRING ;

nativeClass = "[" "import" STRING identifier "]" ;

plusPlus = identifier "++" ;

minusMinus = identifier "--" ;

block = "{" statement* "}" ;

expression = binaryExpression
           | dotExpr
           | numberOpera1
           | numberOpera2
           | boolOpera
           | notBool
           | minusPrefix
           | primary ;

binaryExpression = expression ( ( "<" | ">" | "==" | "!=" | "<=" | ">=" ) expression )* ;

dotExpr = expression ( "." expression )* ;

numberOpera1 = expression ( ( "+" | "-" ) expression )* ;

numberOpera2 = expression ( ( "*" | "/" ) expression )* ;

boolOpera = expression ( ( "and" | "or" | "xor" ) expression )* ;

notBool = "not" expression ;

minusPrefix = "-" expression ;

primary = stringLiteral
        | intLiteral
        | charLiteral
        | doubleLiteral
        | identifier
        | trueLiteral
        | falseLiteral
        | listInit
        | instantiate
        | stringTree
        | lambda
        | list
        | range
        | array
        | tuple
        | dictionary
        | slice
        | asStatement ;

stringLiteral = STRING ;

intLiteral = INT ;

charLiteral = CHAR ;

doubleLiteral = DOUBLE ;

identifier = IDENTIFIER ;

trueLiteral = "true" ;

falseLiteral = "false" ;

listInit = identifier "[" expression "]" ;

instantiate = identifier "(" argList? ")" ;

stringTree = "${" expression "}"* ;

lambda = "(" idList? ")" "->" expression ;

list = "{" argList? "}" ;

range = "[" expression ".." expression "]" ;

array = "[" argList? "]" ;

tuple = "(" expression "," expression ")" ;

dictionary = "{" dicTuple ( "," dicTuple )* "}" ;

dicTuple = expression ":" expression ;

slice = identifier "[" expression? ":" expression? "]" ;

asStatement = identifier "as" identifier ;

idList = identifier ( "," identifier )* ;

argList = expression ( "," expression )* ;
